{"version":3,"file":"index.cjs.js","sources":["../packages/vird/src/vird-node-types.ts","../packages/vird/src/creates.ts","../node_modules/@yattaki/event-handler/dist/index.js","../packages/vird/src/vird-element.ts","../packages/vird-dom/src/create-node.ts","../packages/vird-dom/src/diff.ts","../packages/vird-dom/src/clear-fragment-node.ts","../packages/vird-dom/src/renderer.ts"],"sourcesContent":["export interface VirdNodeTypes {\n  text: '#text'\n  comment: '#comment'\n  fragment: 'document-fragment'\n}\n\nexport const virdNodeTypes: VirdNodeTypes = Object.defineProperties({}, {\n  text: { value: '#text' },\n  comment: { value: '#comment' },\n  fragment: { value: '#document-fragment' }\n})\n","import { VirdNode, VirdNodeText, VirdNodeComment, VirdNodeFragment } from './vird-node'\nimport { virdNodeTypes, VirdNodeTypes } from './vird-node-types'\n\nexport function cloneVirdNode <R extends VirdNode> (virdNode: R, deep = false): R {\n  const type = virdNodeTypes.text\n  const properties = { ...virdNode.properties }\n  const children = deep ? virdNode.children.map(child => cloneVirdNode(child)) : []\n\n  return { type, properties, children } as R\n}\n\nexport function createText (text: string): VirdNodeText {\n  const type = virdNodeTypes.text\n  const properties = { textContent: text }\n  const children: never[] = []\n\n  return { type, properties, children }\n}\n\nexport function createComment (comment: string): VirdNodeComment {\n  const type = virdNodeTypes.comment\n  const properties = { textContent: comment }\n  const children: never[] = []\n\n  return { type, properties, children }\n}\n\nexport function createFragment (...children: VirdNode[]): VirdNodeFragment {\n  const type = virdNodeTypes.fragment\n  const properties = {}\n\n  return { type, properties, children }\n}\n\nexport function createVirdNode (type: VirdNodeTypes['text'], properties?: VirdNodeText['properties']): VirdNodeText\nexport function createVirdNode (type: VirdNodeTypes['comment'], properties?: VirdNodeComment['properties']): VirdNodeComment\nexport function createVirdNode (type: VirdNodeTypes['fragment'], children?: string | (string | VirdNode)[]): VirdNodeFragment\nexport function createVirdNode (type: string, children: string | (string | VirdNode)[]): VirdNode\nexport function createVirdNode (type: string, properties: VirdNode['properties'], children?: string | (string | VirdNode)[]): VirdNode\nexport function createVirdNode (type: string, properties?: VirdNode['properties'] | string | (string | VirdNode)[], children?: string | (string | VirdNode)[]): VirdNode\nexport function createVirdNode (type: string, properties?: VirdNode['properties'] | string | (string | VirdNode)[], children?: string | (string | VirdNode)[]): VirdNode {\n  if (typeof properties !== 'object' || Array.isArray(properties)) {\n    children = properties\n    properties = {}\n  }\n\n  if (typeof children === 'string') {\n    children = [children]\n  } else if (!Array.isArray(children)) {\n    children = []\n  }\n\n  const createChildren = children.map(child => typeof child === 'string' ? createText(child) : child)\n\n  return { type, properties, children: createChildren }\n}\n","class EventHandler {\n    constructor() {\n        this._map = new Map();\n    }\n    /**\n     * Add a new listener.\n     * @param type This represents the name of the event.\n     * @param listener This represents the listener to add.\n     * @param options Specifies characteristics about the event listener.\n     */\n    addEventListener(type, listener, options = {}) {\n        let onMaps = this._map.get(type);\n        if (!onMaps) {\n            onMaps = [];\n            this._map.set(type, onMaps);\n        }\n        let isAdd = true;\n        for (const onMap of onMaps) {\n            if (onMap.listener === listener) {\n                onMap.options = options;\n                isAdd = false;\n                break;\n            }\n        }\n        if (isAdd) {\n            onMaps.push({ listener, options });\n        }\n        return isAdd;\n    }\n    /**\n     * Remove the listener.\n     * @param type This represents the name of the event.\n     * @param listener This represents the listener to remove.\n     */\n    removeEventListener(type, listener) {\n        const onMaps = this._map.get(type);\n        if (onMaps) {\n            let index = 0;\n            for (const onMap of onMaps) {\n                if (onMap.listener === listener) {\n                    onMaps.splice(index, 1);\n                    return true;\n                }\n                index++;\n            }\n        }\n        return false;\n    }\n    /**\n     * Execute the registered event.\n     * @param type This represents the name of the event.\n     * @param data An object to be passed as an argument of the listener.\n     */\n    async dispatchEvent(type, data = {}) {\n        const promises = [];\n        const onMaps = this._map.get(type);\n        if (onMaps) {\n            for (const { listener, options } of [...onMaps]) {\n                const event = {\n                    type,\n                    target: this,\n                    data: { ...(options.data || {}), ...data }\n                };\n                const promise = listener(event);\n                promises.push(promise);\n                if (options.once) {\n                    this.removeEventListener(type, listener);\n                }\n                if (options.wait) {\n                    await promise;\n                }\n            }\n        }\n        await Promise.all(promises);\n    }\n}\n\nexport default EventHandler;\n//# sourceMappingURL=index.js.map\n","import { VirdNode } from '../../index'\nimport { cloneVirdNode } from './creates'\nimport EventHandler, { EventHandlerDataMap } from '@yattaki/event-handler'\n\nexport interface VirdElementEventMap extends EventHandlerDataMap {\n  mount: { parent: VirdElement }\n  unmount: { parent: VirdElement }\n  update: {}\n  'insert-children': { children: VirdElement[]; index: number }\n  'remove-children': { children: VirdElement[] }\n}\n\nexport class VirdElement<T extends { [key: string]: any } = { [key: string]: any }> extends EventHandler<VirdElementEventMap> {\n  readonly virdNode: VirdNode\n\n  private _parent: VirdElement | null = null\n  private _children: VirdElement[]\n\n  state: T = {} as T\n\n  constructor (virdNode: VirdNode) {\n    super()\n\n    this.virdNode = virdNode\n    this._children = virdNode.children.map((child) => new VirdElement(child))\n\n    this.addEventListener('mount', (e) => {\n      for (const child of this.children) {\n        child.dispatchEvent('unmount', { parent: e.data.parent })\n      }\n    })\n\n    this.addEventListener('unmount', (e) => {\n      for (const child of this.children) {\n        child.dispatchEvent('unmount', { parent: e.data.parent })\n      }\n    })\n  }\n\n  insertAfter (beforeChild: VirdElement | null, ...children: VirdElement[]) {\n    const newChildren = this.children\n\n    let index: number\n    if (beforeChild) {\n      index = newChildren.indexOf(beforeChild) + 1\n      if (index < 1) {\n        throw Error('The VirdElement before which the new VirdElement is to be inserted is not a child of this VirdElement.')\n      }\n    } else {\n      index = newChildren.length\n    }\n\n    newChildren.splice(index, 0, ...children)\n    this.setChildren(newChildren)\n    this.dispatchEvent('insert-children', { children, index })\n\n    return this\n  }\n\n  insertBefore (afterChild: VirdElement | null, ...children: VirdElement[]) {\n    return this.insertAfter(\n      afterChild ? afterChild.prev : this.firstChild,\n      ...children\n    )\n  }\n\n  appendChild (...children: VirdElement[]) {\n    return this.insertAfter(null, ...children)\n  }\n\n  removeChild (...children: VirdElement[]) {\n    const newChildren = this.children\n    for (const child of children) {\n      if (!newChildren.includes(child)) {\n        throw Error('The VirdElement to be removed is not a child of this VirdElement.')\n      }\n    }\n\n    this.setChildren(newChildren.filter((child) => !children.includes(child)))\n    this.dispatchEvent('remove-children', { children })\n\n    return this\n  }\n\n  remove () {\n    const parent = this.parent\n    if (parent) {\n      parent.removeChild(this)\n    }\n\n    return this\n  }\n\n  clearChildren () {\n    this.setChildren([])\n\n    return this\n  }\n\n  setChildren (children: VirdElement[]) {\n    const beforeChildren = this.children\n    this._children = children\n    this.virdNode.children = this.children.map((child) => child.virdNode)\n\n    for (const child of beforeChildren) {\n      if (children.includes(child)) { continue }\n      child._parent = null\n      this.dispatchEvent('unmount', { parent: this })\n    }\n\n    for (const child of children) {\n      if (beforeChildren.includes(child)) { continue }\n      child._parent = this\n      this.dispatchEvent('mount', { parent: this })\n    }\n\n    this.update()\n\n    return beforeChildren\n  }\n\n  clone (deep = false) {\n    const virdNode = cloneVirdNode(this.virdNode, deep)\n\n    const virdElement = new VirdElement(virdNode)\n    virdElement.setState(this.state, false)\n\n    return virdElement\n  }\n\n  getVirdElements (\n    getter: (VirdElement: VirdElement) => boolean,\n    includeThis = false\n  ) {\n    const hitVirdElements: VirdElement[] = []\n\n    if (includeThis && getter(this)) {\n      hitVirdElements.push(this)\n    }\n\n    for (const child of this.children) {\n      if (getter(child)) {\n        hitVirdElements.push(child)\n      }\n    }\n\n    return hitVirdElements\n  }\n\n  update () {\n    this.dispatchEvent('update')\n  }\n\n  setState (state: T, update = true) {\n    const beforeState = this.state\n    for (const key of Object.keys(state)) {\n      if (this.state[key] === state[key]) { continue }\n\n      this.state = { ...this.state, ...state }\n      break\n    }\n\n    if (update && beforeState !== this.state) { this.update() }\n  }\n\n  get parent () {\n    return this._parent\n  }\n\n  get children () {\n    return [...this._children]\n  }\n\n  set children (value) {\n    this.setChildren(value)\n  }\n\n  get firstChild () {\n    return (this.children[0] || null) as VirdElement | null\n  }\n\n  get lastChild () {\n    const children = this.children\n    return (children[children.length - 1] || null) as VirdElement | null\n  }\n\n  get next () {\n    const parent = this.parent\n    if (!parent) {\n      return null\n    }\n\n    const children = parent.children\n    return children[children.indexOf(this) + 1] || null\n  }\n\n  get prev () {\n    const parent = this.parent\n    if (!parent) {\n      return null\n    }\n\n    const children = parent.children\n    return children[children.indexOf(this) - 1] || null\n  }\n\n  get type () {\n    return this.virdNode.type\n  }\n\n  set type (value) {\n    this.virdNode.type = value\n    this.update()\n  }\n\n  get properties () {\n    return { ...this.virdNode.properties }\n  }\n\n  set properties (value) {\n    this.virdNode.properties = value\n    this.update()\n  }\n}\n","import {\n  createVirdNode,\n  VirdNode,\n  VirdNodeTypes,\n  virdNodeTypes,\n  VirdNodeComment,\n  VirdNodeText,\n  VirdNodeFragment\n} from '../../vird/index'\n\nexport function createNode (node: Node, trim?: boolean): VirdNode\nexport function createNode (type: VirdNodeTypes['text'], properties?: VirdNodeText['properties']): VirdNodeText\nexport function createNode (type: VirdNodeTypes['comment'], properties?: VirdNodeComment['properties']): VirdNodeComment\nexport function createNode (type: VirdNodeTypes['fragment'], children?: string | (string | VirdNode)[]): VirdNodeFragment\nexport function createNode (type: string, children: string | (string | VirdNode)[]): VirdNode\nexport function createNode (type: string, properties: VirdNode['properties'], children?: string | (string | VirdNode)[]): VirdNode\nexport function createNode (type: string, properties?: VirdNode['properties'] | string | (string | VirdNode)[], children?: string | (string | VirdNode)[]): VirdNode\nexport function createNode (\n  nodeOrType: string | Node,\n  propertiesOrTrim: VirdNode['properties'] | string | (string | VirdNode)[] | boolean = false,\n  children?: string | (string | VirdNode)[]\n): VirdNode {\n  if (typeof nodeOrType === 'string') {\n    if (typeof propertiesOrTrim === 'boolean') { propertiesOrTrim = {} }\n    return createVirdNode(nodeOrType, propertiesOrTrim, children)\n  } else {\n    const node = nodeOrType\n    const type = node.nodeName.toLocaleLowerCase()\n    const properties: VirdNode['properties'] = {}\n    if (node instanceof Element) {\n      for (const { name, value } of node.attributes) {\n        properties[name] = value\n      }\n    } else {\n      properties.textContent = node.textContent || ''\n    }\n\n    const trim = !!propertiesOrTrim\n    let children = [...node.childNodes].map(node => createNode(node, trim))\n    if (trim) {\n      const filter = (virdNode: VirdNode) =>\n        virdNode.type !== virdNodeTypes.comment &&\n        (virdNode.type !== virdNodeTypes.text || !/^\\s*$/.test(virdNode.properties.textContent))\n\n      children = children.filter(filter)\n    }\n\n    return createVirdNode(type, properties, children)\n  }\n}\n","export function diff<T = { [key: string]: any }> (checkObject?: T, comparisonObjet?: T) {\n  const diffObject: { [key: string]: [T[keyof T] | undefined, T[keyof T] | undefined] } = {}\n\n  if (checkObject !== comparisonObjet) {\n    if (checkObject) {\n      if (comparisonObjet) {\n        const checkObjectKeys = Object.keys(checkObject)\n        const comparisonObjetKeys = Object.keys(comparisonObjet)\n\n        const keys = new Set([...checkObjectKeys, ...comparisonObjetKeys]) as Set<Extract<keyof T, string>>\n        for (const key of keys) {\n          const checkObjetValue = checkObject[key]\n          const comparisonObjetValue = comparisonObjet[key]\n          if (checkObjetValue === comparisonObjetValue) { continue }\n\n          diffObject[key] = [checkObjetValue, comparisonObjetValue]\n        }\n      } else {\n        for (const key of Object.keys(checkObject)) {\n          const value = checkObject[key as keyof T]\n          diffObject[key] = [value, undefined]\n        }\n      }\n    } else {\n      if (comparisonObjet) {\n        for (const key of Object.keys(comparisonObjet)) {\n          const value = comparisonObjet[key as keyof T]\n          diffObject[key] = [undefined, value]\n        }\n      }\n    }\n  }\n\n  return diffObject as { [K in keyof T]: [T[K] | undefined, T[K] | undefined] }\n}\n","import { VirdNode } from '../../vird/index'\n\nexport function clearFragmentNode (virdNodes: VirdNode[], key = '#document-fragment') {\n  const result: VirdNode[] = []\n\n  const pushVirdNodes: VirdNode[] = []\n  for (const virdNode of virdNodes) {\n    if (virdNode.type === key) {\n      const children = clearFragmentNode(virdNode.children)\n      result.push(...children)\n      pushVirdNodes.push(...children)\n    } else {\n      result.push(virdNode)\n      pushVirdNodes.push(virdNode)\n    }\n  }\n\n  return result\n}\n","import { VirdNode } from '../../vird/index'\nimport { createNode } from './create-node'\nimport { diff } from './diff'\nimport { clearFragmentNode } from './clear-fragment-node'\n\nexport type RenderItem = VirdNode | ((node: Node) => VirdNode)\nexport type PropertyValueMap = { newValue?: string, oldValue?: string }\nexport type PropertyTypeBinder = (node: Node, value: PropertyValueMap) => void\nexport type PropertyTypeRegExpBinder = (node: Node, matchArray: RegExpMatchArray, value: PropertyValueMap) => string\nexport type CustomNodeCreator = (virdNode: VirdNode) => Node\n\nexport class Renderer {\n  private readonly _renderMap: WeakMap<Node, (VirdNode | ((node: Node) => VirdNode))[]> = new Map()\n  private readonly _oldVirdNodeMap: WeakMap<Node, VirdNode[]> = new Map()\n  private readonly _nodeMap: WeakMap<VirdNode, Node> = new WeakMap()\n  private readonly _virdNodeMap: WeakMap<Node, VirdNode> = new WeakMap()\n  private readonly _nodeCreatorMap: WeakMap<Node, CustomNodeCreator> = new WeakMap()\n  private _propertyTypeBinderMap: Map<string, PropertyTypeBinder> = new Map()\n  private _propertyTypeRegExpBinderMap: Map<RegExp, PropertyTypeRegExpBinder> = new Map()\n  private _customNodeCreatorMap: Map<string, CustomNodeCreator> = new Map()\n  fragmentType = '#document-fragment'\n\n  constructor () {\n    this.setCustomNode('#text', () => document.createTextNode(''))\n    this.setCustomNode('#comment', () => document.createComment(''))\n    this.setCustomNode('#cdata-section', () => document.createCDATASection(''))\n    this.setPropertyTypeBind('textContent', (node, value) => { node.textContent = value.newValue || '' })\n  }\n\n  private _updateNode (node: Node, newProperties?: VirdNode['properties'], oldProperties?: VirdNode['properties']) {\n    const diffObject = diff(newProperties, oldProperties)\n\n    for (const type of Object.keys(diffObject)) {\n      const [newValue, oldValue] = diffObject[type]\n\n      let isMatch = false\n      for (const [regExp, propertyTypeRegExpBinder] of this._propertyTypeRegExpBinderMap) {\n        const matchArray = type.match(regExp)\n        if (matchArray) {\n          isMatch = true\n          propertyTypeRegExpBinder(node, matchArray, { newValue, oldValue })\n          break\n        }\n      }\n\n      if (!isMatch) {\n        const propertyTypeBinder = this._propertyTypeBinderMap.get(type)\n        if (propertyTypeBinder) {\n          propertyTypeBinder(node, { newValue, oldValue })\n        } else if (node instanceof Element) {\n          if (newValue) {\n            node.setAttribute(type, newValue)\n          } else {\n            node.removeAttribute(type)\n          }\n        }\n      }\n    }\n  }\n\n  render (node: Node, ...renderItems: RenderItem[]) {\n    const renderVirdNodes = renderItems.map(item => typeof item === 'function' ? item(node) : item)\n    const newVirdNodes = clearFragmentNode(renderVirdNodes)\n    const oldVirdNodes = this.getChildrenVirdNode(node)\n    const childNodes = [...node.childNodes]\n    this._renderMap.set(node, renderItems)\n    this._oldVirdNodeMap.set(node, newVirdNodes)\n\n    let i = 0\n    const maxIndex = Math.max(childNodes.length, newVirdNodes.length)\n    while (i < maxIndex) {\n      const oldVirdNode = (oldVirdNodes[i] || null) as VirdNode | null\n      const newVirdNode = (newVirdNodes[i] || null) as VirdNode | null\n      const childNode = (childNodes[i] || null) as Node | null\n\n      let newNode: Node | null = null\n      if (newVirdNode) {\n        if (!oldVirdNode || oldVirdNode.type !== newVirdNode.type) {\n          newNode = this.createNode(newVirdNode)\n\n          if (childNode) {\n            node.replaceChild(newNode, childNode)\n          } else {\n            node.appendChild(newNode)\n          }\n        } else {\n          newNode = childNode\n        }\n      } else {\n        if (childNode) {\n          node.removeChild(childNode)\n        }\n      }\n\n      if (newNode) {\n        this._updateNode(\n          newNode, newVirdNode ? newVirdNode.properties : undefined,\n          oldVirdNode ? oldVirdNode.properties : undefined\n        )\n\n        if (newVirdNode && newVirdNode.children.length > 0) {\n          this.render(newNode, ...newVirdNode.children)\n        }\n      }\n\n      i++\n    }\n\n    return newVirdNodes\n  }\n\n  renderDom (node: Node, trim = false) {\n    const virdNodes = createNode(node, trim).children\n\n    return this.render(node, ...virdNodes)\n  }\n\n  reRender (node: Node) {\n    const virdNodes = this._renderMap.get(node)\n    if (virdNodes) { this.render(node, ...virdNodes) }\n  }\n\n  createDispatcher (node: Node) {\n    return async (beforeCallback?: () => void | Promise<void>) => {\n      if (beforeCallback) { await beforeCallback() }\n\n      this.reRender(node)\n    }\n  }\n\n  createEffect<T = any> (node: Node, effect: (value?: T) => T | Promise<T>, initValue?: T) {\n    const dispatcher = this.createDispatcher(node)\n\n    return {\n      value: initValue,\n      setEffect (value: T) {\n        dispatcher(async () => { this.value = await effect(value) })\n      }\n    }\n  }\n\n  createNode (virdNode: VirdNode) {\n    let createNode: Node | undefined\n    const realNode = this._nodeMap.get(virdNode)\n    if (realNode) { createNode = realNode }\n\n    const beforeCreator = createNode ? this._nodeCreatorMap.get(createNode) : undefined\n    const creator = this._customNodeCreatorMap.get(virdNode.type)\n    if (beforeCreator !== creator && creator) {\n      createNode = creator(virdNode)\n    }\n\n    if (!createNode) { createNode = document.createElement(virdNode.type) }\n\n    this._nodeMap.set(virdNode, createNode)\n    this._virdNodeMap.set(createNode, virdNode)\n\n    return createNode\n  }\n\n  clone () {\n    const renderer = new Renderer()\n\n    for (const [regExp, binder] of this._propertyTypeRegExpBinderMap) {\n      renderer.setPropertyTypeRegExpBind(regExp, binder)\n    }\n\n    for (const [type, binder] of this._propertyTypeBinderMap) {\n      renderer.setPropertyTypeBind(type, binder)\n    }\n  }\n\n  getNode (virdNode: VirdNode) {\n    return this._nodeMap.get(virdNode) || null\n  }\n\n  getVirdNode (node: Node) {\n    return this._virdNodeMap.get(node) || null\n  }\n\n  getChildrenVirdNode (node: Node) {\n    return this._oldVirdNodeMap.get(node) || []\n  }\n\n  setCustomNode (type: string, creator: CustomNodeCreator) {\n    this._customNodeCreatorMap.set(type, creator)\n\n    return this\n  }\n\n  removeCustomNode (type: string) {\n    this._customNodeCreatorMap.delete(type)\n\n    return this\n  }\n\n  setPropertyTypeRegExpBind (regExp: RegExp, binder: PropertyTypeRegExpBinder) {\n    this.removePropertyTypeRegExpBind(regExp)\n    this._propertyTypeRegExpBinderMap.set(regExp, binder)\n\n    return this\n  }\n\n  removePropertyTypeRegExpBind (regExp: RegExp) {\n    for (const key of this._propertyTypeRegExpBinderMap.keys()) {\n      if (String(key) !== String(regExp)) { continue }\n\n      this._propertyTypeRegExpBinderMap.delete(regExp)\n      break\n    }\n\n    return this\n  }\n\n  setPropertyTypeBind (type: string, binder: PropertyTypeBinder) {\n    this._propertyTypeBinderMap.set(type, binder)\n\n    return this\n  }\n\n  removePropertyTypeBind (type: string) {\n    this._propertyTypeBinderMap.delete(type)\n\n    return this\n  }\n}\n\nexport const renderer = new Renderer()\n"],"names":[],"mappings":"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"}