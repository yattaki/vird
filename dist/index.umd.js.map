{"version":3,"file":"index.umd.js","sources":["../packages/vird/src/create.ts","../packages/vird-dom/src/create-node.ts","../packages/vird-dom/src/diff.ts","../packages/vird-dom/src/clear-fragment-node.ts","../packages/vird-dom/src/renderer.ts","../packages/vird-dom/index.ts"],"sourcesContent":["import { VirdNode } from './vird-node'\r\n\r\nexport function createText (text: string): VirdNode {\r\n  const type = '#text'\r\n  const properties = { textContent: text }\r\n  const children: VirdNode[] = []\r\n\r\n  return { type, properties, children }\r\n}\r\n\r\nexport function createComment (comment: string): VirdNode {\r\n  const type = '#comment'\r\n  const properties = { textContent: comment }\r\n  const children: VirdNode[] = []\r\n\r\n  return { type, properties, children }\r\n}\r\n\r\nexport function createFragment (...children: VirdNode[]): VirdNode {\r\n  const type = '#document-fragment'\r\n  const properties = {}\r\n\r\n  return { type, properties, children }\r\n}\r\n\r\nexport function createNode (type: string, children: string | (string | VirdNode)[]): VirdNode\r\nexport function createNode (type: string, properties: VirdNode['properties'], children?: string | (string | VirdNode)[]): VirdNode\r\nexport function createNode (type: string, properties?: VirdNode['properties'] | string | (string | VirdNode)[], children?: string | (string | VirdNode)[]): VirdNode\r\nexport function createNode (type: string, properties?: VirdNode['properties'] | string | (string | VirdNode)[], children?: string | (string | VirdNode)[]): VirdNode {\r\n  if (!properties || typeof properties === 'string' || Array.isArray(properties)) {\r\n    children = properties\r\n    properties = {}\r\n  }\r\n\r\n  if (typeof children === 'string') {\r\n    children = [children]\r\n  } else if (!Array.isArray(children)) {\r\n    children = []\r\n  }\r\n\r\n  const createChildren = children.map(child => typeof child === 'string' ? createText(child) : child)\r\n\r\n  return { type, properties, children: createChildren }\r\n}\r\n","import {\r\n  createNode as createVirdNode,\r\n  VirdNode\r\n} from '../../vird/index'\r\n\r\nexport function createNode (node: Node, trim: boolean): VirdNode\r\nexport function createNode (type: string, children: string | (string | VirdNode)[]): VirdNode\r\nexport function createNode (type: string, properties: VirdNode['properties'], children?: string | (string | VirdNode)[]): VirdNode\r\nexport function createNode (type: string, properties?: VirdNode['properties'] | string | (string | VirdNode)[], children?: string | (string | VirdNode)[]): VirdNode\r\nexport function createNode (\r\n  nodeOrType: string | Node,\r\n  propertiesOrTrim: VirdNode['properties'] | string | (string | VirdNode)[] | boolean = false,\r\n  children?: string | (string | VirdNode)[]\r\n): VirdNode {\r\n  if (typeof nodeOrType === 'string') {\r\n    if (typeof propertiesOrTrim === 'boolean') { propertiesOrTrim = {} }\r\n    return createVirdNode(nodeOrType, propertiesOrTrim, children)\r\n  } else {\r\n    const node = nodeOrType\r\n    const type = node.nodeName.toLocaleLowerCase()\r\n    const properties: VirdNode['properties'] = {}\r\n    if (node instanceof Element) {\r\n      for (const { name, value } of node.attributes) {\r\n        properties[name] = value\r\n      }\r\n    } else {\r\n      properties.textContent = node.textContent || ''\r\n    }\r\n\r\n    const trim = !!propertiesOrTrim\r\n    let children = [...node.childNodes].map(node => createNode(node, trim))\r\n    if (trim) {\r\n      children = children.filter(child => !['#text', '#comment'].includes(child.type) || !/^\\s*$/.test(child.properties.textContent))\r\n    }\r\n\r\n    return createVirdNode(type, properties, children)\r\n  }\r\n}\r\n","export function diff<T = { [key: string]: any }> (checkObject?: T, comparisonObjet?: T) {\r\n  const diffObject: { [key: string]: [T[keyof T] | undefined, T[keyof T] | undefined] } = {}\r\n\r\n  if (checkObject !== comparisonObjet) {\r\n    if (checkObject) {\r\n      if (comparisonObjet) {\r\n        const checkObjectKeys = Object.keys(checkObject)\r\n        const comparisonObjetKeys = Object.keys(comparisonObjet)\r\n\r\n        const keys = new Set([...checkObjectKeys, ...comparisonObjetKeys]) as Set<Extract<keyof T, string>>\r\n        for (const key of keys) {\r\n          const checkObjetValue = checkObject[key]\r\n          const comparisonObjetValue = comparisonObjet[key]\r\n          if (checkObjetValue === comparisonObjetValue) { continue }\r\n\r\n          diffObject[key] = [checkObjetValue, comparisonObjetValue]\r\n        }\r\n      } else {\r\n        for (const key of Object.keys(checkObject)) {\r\n          const value = checkObject[key as keyof T]\r\n          diffObject[key] = [value, undefined]\r\n        }\r\n      }\r\n    } else {\r\n      if (comparisonObjet) {\r\n        for (const key of Object.keys(comparisonObjet)) {\r\n          const value = comparisonObjet[key as keyof T]\r\n          diffObject[key] = [undefined, value]\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return diffObject as { [K in keyof T]: [T[K] | undefined, T[K] | undefined] }\r\n}\r\n","import { VirdNode } from '../../vird/index'\r\n\r\nexport function clearFragmentNode (virdNodes: VirdNode[], key = '#document-fragment') {\r\n  const result: VirdNode[] = []\r\n\r\n  const pushVirdNodes: VirdNode[] = []\r\n  for (const virdNode of virdNodes) {\r\n    if (virdNode.type === key) {\r\n      const children = clearFragmentNode(virdNode.children)\r\n      result.push(...children)\r\n      pushVirdNodes.push(...children)\r\n    } else {\r\n      result.push(virdNode)\r\n      pushVirdNodes.push(virdNode)\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\n","import { VirdNode } from '../../vird/index'\r\nimport { createNode } from './create-node'\r\nimport { diff } from './diff'\r\nimport { clearFragmentNode } from './clear-fragment-node'\r\n\r\nexport type RenderItem = VirdNode | ((node: Node) => VirdNode)\r\nexport type PropertyValueMap = { newValue?: string, oldValue?: string }\r\nexport type PropertyTypeBinder = (node: Node, value: PropertyValueMap) => void\r\nexport type PropertyTypeRegExpBinder = (node: Node, matchArray: RegExpMatchArray, value: PropertyValueMap) => string\r\nexport type CustomNodeCreator = (virdNode: VirdNode) => Node\r\n\r\nexport class Renderer {\r\n  private readonly _renderMap: WeakMap<Node, (VirdNode | ((node: Node) => VirdNode))[]> = new Map()\r\n  private readonly _oldVirdNodeMap: WeakMap<Node, VirdNode[]> = new Map()\r\n  private readonly _nodeMap: WeakMap<VirdNode, Node> = new WeakMap()\r\n  private readonly _virdNodeMap: WeakMap<Node, VirdNode> = new WeakMap()\r\n  private readonly _nodeCreatorMap: WeakMap<Node, CustomNodeCreator> = new WeakMap()\r\n  private _propertyTypeBinderMap: Map<string, PropertyTypeBinder> = new Map()\r\n  private _propertyTypeRegExpBinderMap: Map<RegExp, PropertyTypeRegExpBinder> = new Map()\r\n  private _customNodeCreatorMap: Map<string, CustomNodeCreator> = new Map()\r\n  fragmentType = '#document-fragment'\r\n\r\n  constructor () {\r\n    this.setCustomNode('#text', () => document.createTextNode(''))\r\n    this.setCustomNode('#comment', () => document.createComment(''))\r\n    this.setCustomNode('#cdata-section', () => document.createCDATASection(''))\r\n    this.setPropertyTypeBind('textContent', (node, value) => { node.textContent = value.newValue || '' })\r\n  }\r\n\r\n  private _updateNode (node: Node, newProperties?: VirdNode['properties'], oldProperties?: VirdNode['properties']) {\r\n    const diffObject = diff(newProperties, oldProperties)\r\n\r\n    for (const type of Object.keys(diffObject)) {\r\n      const [newValue, oldValue] = diffObject[type]\r\n\r\n      let isMatch = false\r\n      for (const [regExp, propertyTypeRegExpBinder] of this._propertyTypeRegExpBinderMap) {\r\n        const matchArray = type.match(regExp)\r\n        if (matchArray) {\r\n          isMatch = true\r\n          propertyTypeRegExpBinder(node, matchArray, { newValue, oldValue })\r\n          break\r\n        }\r\n      }\r\n\r\n      if (!isMatch) {\r\n        const propertyTypeBinder = this._propertyTypeBinderMap.get(type)\r\n        if (propertyTypeBinder) {\r\n          propertyTypeBinder(node, { newValue, oldValue })\r\n        } else if (node instanceof Element) {\r\n          if (newValue) {\r\n            node.setAttribute(type, newValue)\r\n          } else {\r\n            node.removeAttribute(type)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  render (node: Node, ...renderItems: RenderItem[]) {\r\n    const renderVirdNodes = renderItems.map(item => typeof item === 'function' ? item(node) : item)\r\n    const newVirdNodes = clearFragmentNode(renderVirdNodes)\r\n    const oldVirdNodes = this.getChildrenVirdNode(node)\r\n    const childNodes = [...node.childNodes]\r\n    this._renderMap.set(node, renderItems)\r\n    this._oldVirdNodeMap.set(node, newVirdNodes)\r\n\r\n    let i = 0\r\n    const maxIndex = Math.max(childNodes.length, newVirdNodes.length)\r\n    while (i < maxIndex) {\r\n      const oldVirdNode = (oldVirdNodes[i] || null) as VirdNode | null\r\n      const newVirdNode = (newVirdNodes[i] || null) as VirdNode | null\r\n      const childNode = (childNodes[i] || null) as Node | null\r\n\r\n      let newNode: Node | null = null\r\n      if (newVirdNode) {\r\n        if (!oldVirdNode || oldVirdNode.type !== newVirdNode.type) {\r\n          newNode = this.createNode(newVirdNode)\r\n\r\n          if (childNode) {\r\n            node.replaceChild(newNode, childNode)\r\n          } else {\r\n            node.appendChild(newNode)\r\n          }\r\n        } else {\r\n          newNode = childNode\r\n        }\r\n      } else {\r\n        if (childNode) {\r\n          node.removeChild(childNode)\r\n        }\r\n      }\r\n\r\n      if (newNode) {\r\n        this._updateNode(\r\n          newNode, newVirdNode ? newVirdNode.properties : undefined,\r\n          oldVirdNode ? oldVirdNode.properties : undefined\r\n        )\r\n\r\n        if (newVirdNode && newVirdNode.children.length > 0) {\r\n          this.render(newNode, ...newVirdNode.children)\r\n        }\r\n      }\r\n\r\n      i++\r\n    }\r\n\r\n    return newVirdNodes\r\n  }\r\n\r\n  renderDom (node: Node, trim = false) {\r\n    const virdNodes = createNode(node, trim).children\r\n\r\n    return this.render(node, ...virdNodes)\r\n  }\r\n\r\n  reRender (node: Node) {\r\n    const virdNodes = this._renderMap.get(node)\r\n    if (virdNodes) { this.render(node, ...virdNodes) }\r\n  }\r\n\r\n  createDispatcher (node: Node) {\r\n    return async (beforeCallback?: () => void | Promise<void>) => {\r\n      if (beforeCallback) { await beforeCallback() }\r\n\r\n      this.reRender(node)\r\n    }\r\n  }\r\n\r\n  createEffect<T = any> (node: Node, effect: (value?: T) => T | Promise<T>, initValue?: T) {\r\n    const dispatcher = this.createDispatcher(node)\r\n\r\n    return {\r\n      value: initValue,\r\n      setEffect (value: T) {\r\n        dispatcher(async () => { this.value = await effect(value) })\r\n      }\r\n    }\r\n  }\r\n\r\n  createNode (virdNode: VirdNode) {\r\n    let createNode: Node | undefined\r\n    const realNode = this._nodeMap.get(virdNode)\r\n    if (realNode) { createNode = realNode }\r\n\r\n    const beforeCreator = createNode ? this._nodeCreatorMap.get(createNode) : undefined\r\n    const creator = this._customNodeCreatorMap.get(virdNode.type)\r\n    if (beforeCreator !== creator && creator) {\r\n      createNode = creator(virdNode)\r\n    }\r\n\r\n    if (!createNode) { createNode = document.createElement(virdNode.type) }\r\n\r\n    this._nodeMap.set(virdNode, createNode)\r\n    this._virdNodeMap.set(createNode, virdNode)\r\n\r\n    return createNode\r\n  }\r\n\r\n  clone () {\r\n    const renderer = new Renderer()\r\n\r\n    for (const [regExp, binder] of this._propertyTypeRegExpBinderMap) {\r\n      renderer.setPropertyTypeRegExpBind(regExp, binder)\r\n    }\r\n\r\n    for (const [type, binder] of this._propertyTypeBinderMap) {\r\n      renderer.setPropertyTypeBind(type, binder)\r\n    }\r\n  }\r\n\r\n  getNode (virdNode: VirdNode) {\r\n    return this._nodeMap.get(virdNode) || null\r\n  }\r\n\r\n  getVirdNode (node: Node) {\r\n    return this._virdNodeMap.get(node) || null\r\n  }\r\n\r\n  getChildrenVirdNode (node: Node) {\r\n    return this._oldVirdNodeMap.get(node) || []\r\n  }\r\n\r\n  setCustomNode (type: string, creator: CustomNodeCreator) {\r\n    this._customNodeCreatorMap.set(type, creator)\r\n\r\n    return this\r\n  }\r\n\r\n  removeCustomNode (type: string) {\r\n    this._customNodeCreatorMap.delete(type)\r\n\r\n    return this\r\n  }\r\n\r\n  setPropertyTypeRegExpBind (regExp: RegExp, binder: PropertyTypeRegExpBinder) {\r\n    this.removePropertyTypeRegExpBind(regExp)\r\n    this._propertyTypeRegExpBinderMap.set(regExp, binder)\r\n\r\n    return this\r\n  }\r\n\r\n  removePropertyTypeRegExpBind (regExp: RegExp) {\r\n    for (const key of this._propertyTypeRegExpBinderMap.keys()) {\r\n      if (String(key) !== String(regExp)) { continue }\r\n\r\n      this._propertyTypeRegExpBinderMap.delete(regExp)\r\n      break\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  setPropertyTypeBind (type: string, binder: PropertyTypeBinder) {\r\n    this._propertyTypeBinderMap.set(type, binder)\r\n\r\n    return this\r\n  }\r\n\r\n  removePropertyTypeBind (type: string) {\r\n    this._propertyTypeBinderMap.delete(type)\r\n\r\n    return this\r\n  }\r\n}\r\n","import { createNode } from './src/create-node'\r\nimport {\r\n  Renderer,\r\n  PropertyTypeBinder,\r\n  PropertyTypeRegExpBinder,\r\n  PropertyValueMap,\r\n  CustomNodeCreator\r\n} from './src/renderer'\r\n\r\nconst renderer = new Renderer()\r\n\r\nexport {\r\n  Renderer,\r\n  PropertyTypeRegExpBinder,\r\n  PropertyTypeBinder,\r\n  PropertyValueMap,\r\n  CustomNodeCreator,\r\n  renderer,\r\n  createNode\r\n}\r\n"],"names":["createNode","createVirdNode"],"mappings":"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"}